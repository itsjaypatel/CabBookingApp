package com.itsjaypatel.cabbookingapp.services.impl;

import com.itsjaypatel.cabbookingapp.dtos.RideRequestDto;
import com.itsjaypatel.cabbookingapp.entities.PaymentMethod;
import com.itsjaypatel.cabbookingapp.entities.RideRequest;
import com.itsjaypatel.cabbookingapp.entities.Rider;
import com.itsjaypatel.cabbookingapp.entities.enums.RideRequestStatus;
import com.itsjaypatel.cabbookingapp.repositoties.RideRequestRepository;
import com.itsjaypatel.cabbookingapp.services.RideRequestService;
import com.itsjaypatel.cabbookingapp.services.RiderService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.locationtech.jts.geom.Point;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Slf4j
@Service
@RequiredArgsConstructor
public class RideRequestServiceImpl implements RideRequestService {

    private final ModelMapper modelMapper;
    private final RideRequestRepository rideRequestRepository;

    @PersistenceContext
    private final EntityManager entityManager;

    @Override
    public RideRequest createRideRequest(RideRequestDto rideRequestDto, Rider rider) {
        RideRequest rideRequest = modelMapper.map(rideRequestDto, RideRequest.class);
        rideRequest.setRider(rider);
        rideRequest.setId(null);
        rideRequest.setRequestedTime(null);
        rideRequest.setRideRequestStatus(RideRequestStatus.PENDING);
        rideRequest.setPaymentMethod(PaymentMethod.WALLET);

        log.info("RideRequest ::: {}", rideRequest.toString());
        return rideRequestRepository.save(rideRequest);
    }



//    @Transactional
//    public RideRequest saveRideRequest(RideRequest rideRequest) {
//        String sql = "INSERT INTO ride_request (rider_id, ride_request_status, pickup_location, drop_off_location, requested_time, payment_method) " +
//                "VALUES (?, ?, ST_GeomFromText(?, 4326), ST_GeomFromText(?, 4326), ?, ?);";
//
//        entityManager.createNativeQuery(sql)
//                .setParameter(1, rideRequest.getRider().getId())
//                .setParameter(2, rideRequest.getRideRequestStatus().toString())
//                .setParameter(3, pointToWKT(rideRequest.getPickupLocation()))
//                .setParameter(4, pointToWKT(rideRequest.getDropOffLocation()))
//                .setParameter(5, rideRequest.getRequestedTime())
//                .setParameter(6, rideRequest.getPaymentMethod().toString())
//                .executeUpdate();
//
//        // Retrieve the saved object (you may need to adjust this part based on your actual implementation)
//        // Assuming the primary key (id) is generated by the database and returned, you can fetch the saved entity.
//        // Note: This is a simplified example. You might need to fetch the inserted record by some unique identifier.
//
//        return entityManager.
//                createQuery("SELECT r FROM RideRequest r WHERE r.rider.id = :rider_id ORDER BY r.id DESC", RideRequest.class)
//                .setParameter("rider_id", rideRequest.getRider().getId())
//                .setMaxResults(1)
//                .getSingleResult();
//    }
//
//    private String pointToWKT(Point point) {
//        return String.format("POINT(%s %s)", point.getX(), point.getY());
//    }
}
